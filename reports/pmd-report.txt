src/restaurantsystem/Main.java:10:	UnnecessaryImport:	UnnecessaryImport: Unused import 'java.nio.file.Files'
src/restaurantsystem/Main.java:20:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/Main.java:20:	ShortClassName:	ShortClassName: Avoid short class names like Main
src/restaurantsystem/Main.java:31:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'im' could be declared final
src/restaurantsystem/Main.java:31:	ShortVariable:	ShortVariable: Avoid variables with short names like im
src/restaurantsystem/Main.java:32:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'JFrame': 'WindowConstants::EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/Main.java:39:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'rootDir' could be declared final
src/restaurantsystem/Main.java:47:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'fileName' could be declared final
src/restaurantsystem/Main.java:48:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/restaurantsystem/Main.java:48:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'file' could be declared final
src/restaurantsystem/Main.java:54:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/MainMenu.java:16:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/MainMenu.java:21:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/MainMenu.java:22:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [MainMenu.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/MainMenu.java:31:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/MainMenu.java:32:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/MainMenu.java:41:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/MainMenu.java:54:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/MainMenu.java:54:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/MainMenu.java:61:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/MainMenu.java:61:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/MainMenu.java:68:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/MainMenu.java:68:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/MainMenu.java:73:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel1Layout' could be declared final
src/restaurantsystem/MainMenu.java:97:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/MainMenu.java:97:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/MainMenu.java:102:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel2Layout' could be declared final
src/restaurantsystem/MainMenu.java:125:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/MainMenu.java:146:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/MainMenu.java:147:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'im' could be declared final
src/restaurantsystem/MainMenu.java:147:	ShortVariable:	ShortVariable: Avoid variables with short names like im
src/restaurantsystem/MainMenu.java:153:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/MainMenu.java:154:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'l' could be declared final
src/restaurantsystem/MainMenu.java:154:	ShortVariable:	ShortVariable: Avoid variables with short names like l
src/restaurantsystem/MainMenu.java:159:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/MainMenu.java:160:	DoNotTerminateVM:	DoNotTerminateVM: System.exit() should not be used in J2EE/JEE apps
src/restaurantsystem/MainMenu.java:163:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/MainMenu.java:164:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'om' could be declared final
src/restaurantsystem/MainMenu.java:164:	ShortVariable:	ShortVariable: Avoid variables with short names like om
src/restaurantsystem/MainMenu.java:174:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/MainMenu.java:175:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/MainMenu.java:176:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/MainMenu.java:179:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/MainMenu.java:180:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/MainMenu.java:186:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/MainMenu.java:187:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/MainMenu.java:188:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/MainMenu.java:189:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/MainMenu.java:190:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/MainMenu.java:191:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/MainMenu.java:192:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/MainMenu.java:199:	MissingOverride:	MissingOverride: The method 'run()' is missing an @Override annotation.
src/restaurantsystem/MainMenu.java:206:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/MainMenu.java:206:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/MainMenu.java:206:	SingularField:	SingularField: Perhaps 'exitButton' could be replaced by a local variable.
src/restaurantsystem/MainMenu.java:207:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/MainMenu.java:207:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/MainMenu.java:207:	LongVariable:	LongVariable: Avoid excessively long variable names like itemManagementButton
src/restaurantsystem/MainMenu.java:207:	SingularField:	SingularField: Perhaps 'itemManagementButton' could be replaced by a local variable.
src/restaurantsystem/MainMenu.java:208:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/MainMenu.java:208:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/MainMenu.java:208:	SingularField:	SingularField: Perhaps 'jPanel1' could be replaced by a local variable.
src/restaurantsystem/MainMenu.java:209:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/MainMenu.java:209:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/MainMenu.java:209:	SingularField:	SingularField: Perhaps 'jPanel2' could be replaced by a local variable.
src/restaurantsystem/MainMenu.java:210:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/MainMenu.java:210:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/MainMenu.java:210:	LongVariable:	LongVariable: Avoid excessively long variable names like labourManagementButton
src/restaurantsystem/MainMenu.java:210:	SingularField:	SingularField: Perhaps 'labourManagementButton' could be replaced by a local variable.
src/restaurantsystem/MainMenu.java:211:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/MainMenu.java:211:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/MainMenu.java:211:	LongVariable:	LongVariable: Avoid excessively long variable names like orderManagementButton
src/restaurantsystem/MainMenu.java:211:	SingularField:	SingularField: Perhaps 'orderManagementButton' could be replaced by a local variable.
src/restaurantsystem/component/auth/Login.java:15:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/auth/Login.java:20:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/auth/Login.java:21:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [Login.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/auth/Login.java:42:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/auth/Login.java:52:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/auth/Login.java:65:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/auth/Login.java:65:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/auth/Login.java:75:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/auth/Login.java:75:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/auth/Login.java:80:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'loginPanelLayout' could be declared final
src/restaurantsystem/component/auth/Login.java:114:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/auth/Login.java:131:	LawOfDemeter:	LawOfDemeter: Call to `getAccessibleContext` on foreign value `loginPanel` (degree 1)
src/restaurantsystem/component/auth/Login.java:136:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/auth/Login.java:137:	LiteralsFirstInComparisons:	LiteralsFirstInComparisons: Position literals first in String comparisons
src/restaurantsystem/component/auth/Login.java:140:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'mainMenu' could be declared final
src/restaurantsystem/component/auth/Login.java:150:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/auth/Login.java:159:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/auth/Login.java:160:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/auth/Login.java:161:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/auth/Login.java:164:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/auth/Login.java:165:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/auth/Login.java:171:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/auth/Login.java:172:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/auth/Login.java:173:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/auth/Login.java:174:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/auth/Login.java:175:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/auth/Login.java:176:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/auth/Login.java:177:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/auth/Login.java:189:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/auth/Login.java:189:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/auth/Login.java:189:	SingularField:	SingularField: Perhaps 'loginButton' could be replaced by a local variable.
src/restaurantsystem/component/auth/Login.java:190:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/auth/Login.java:190:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/auth/Login.java:190:	SingularField:	SingularField: Perhaps 'loginPanel' could be replaced by a local variable.
src/restaurantsystem/component/auth/Login.java:191:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/auth/Login.java:191:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/auth/Login.java:192:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/auth/Login.java:192:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/auth/Login.java:192:	SingularField:	SingularField: Perhaps 'passwordLabel' could be replaced by a local variable.
src/restaurantsystem/component/auth/Login.java:193:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/auth/Login.java:193:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/auth/Login.java:194:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/auth/Login.java:194:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/auth/Login.java:194:	SingularField:	SingularField: Perhaps 'userNameLabel' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingHelper.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:19:	ShortVariable:	ShortVariable: Avoid variables with short names like sc
src/restaurantsystem/component/billing/BillingHelper.java:19:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'sc'.
src/restaurantsystem/component/billing/BillingHelper.java:20:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:21:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:21:	SingularField:	SingularField: Perhaps 'name' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingHelper.java:22:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:22:	SingularField:	SingularField: Perhaps 'price' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingHelper.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:23:	SingularField:	SingularField: Perhaps 'quantity' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingHelper.java:24:	AvoidStringBufferField:	AvoidStringBufferField: StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
src/restaurantsystem/component/billing/BillingHelper.java:24:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:24:	ImmutableField:	ImmutableField: Field 'fullnames' may be declared final
src/restaurantsystem/component/billing/BillingHelper.java:25:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:25:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'dPrice'.
src/restaurantsystem/component/billing/BillingHelper.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:26:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'dQuantity'.
src/restaurantsystem/component/billing/BillingHelper.java:27:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:27:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'multi'.
src/restaurantsystem/component/billing/BillingHelper.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingHelper.java:28:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/component/billing/BillingHelper.java:28:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'pw'.
src/restaurantsystem/component/billing/BillingHelper.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/component/billing/BillingHelper.java:41:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/component/billing/BillingHelper.java:46:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/component/billing/BillingHelper.java:51:	UnnecessaryBoxing:	UnnecessaryBoxing: Unnecessary implicit unboxing. Use Double.parseDouble(...) instead
src/restaurantsystem/component/billing/BillingHelper.java:53:	AvoidCatchingGenericException:	AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
src/restaurantsystem/component/billing/BillingHelper.java:54:	SystemPrintln:	SystemPrintln: Usage of System.out/err
src/restaurantsystem/component/billing/BillingHelper.java:62:	SystemPrintln:	SystemPrintln: Usage of System.out/err
src/restaurantsystem/component/billing/BillingHelper.java:63:	AvoidCatchingGenericException:	AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
src/restaurantsystem/component/billing/BillingHelper.java:64:	SystemPrintln:	SystemPrintln: Usage of System.out/err
src/restaurantsystem/component/billing/BillingHelper.java:74:	InefficientStringBuffering:	InefficientStringBuffering: Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
src/restaurantsystem/component/billing/BillingHelper.java:76:	AvoidCatchingGenericException:	AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
src/restaurantsystem/component/billing/BillingHelper.java:77:	SystemPrintln:	SystemPrintln: Usage of System.out/err
src/restaurantsystem/component/billing/BillingManagement.java:18:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/billing/BillingManagement.java:20:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:20:	NonSerializableClass:	NonSerializableClass: The field 't' of serializable class 'restaurantsystem.component.billing.BillingManagement' is of non-serializable type 'restaurantsystem.component.billing.BillingHelper'.
src/restaurantsystem/component/billing/BillingManagement.java:20:	ShortVariable:	ShortVariable: Avoid variables with short names like t
src/restaurantsystem/component/billing/BillingManagement.java:20:	SingularField:	SingularField: Perhaps 't' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingManagement.java:21:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:22:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:23:	ImmutableField:	ImmutableField: Field 'totalPrice' may be declared final
src/restaurantsystem/component/billing/BillingManagement.java:23:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'totalPrice'
src/restaurantsystem/component/billing/BillingManagement.java:23:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'totalPrice'.
src/restaurantsystem/component/billing/BillingManagement.java:24:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:24:	ImmutableField:	ImmutableField: Field 'sum' may be declared final
src/restaurantsystem/component/billing/BillingManagement.java:24:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'sum'
src/restaurantsystem/component/billing/BillingManagement.java:24:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'sum'.
src/restaurantsystem/component/billing/BillingManagement.java:26:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:26:	MissingOverride:	MissingOverride: The method 'setName(String)' is missing an @Override annotation.
src/restaurantsystem/component/billing/BillingManagement.java:30:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'quantity' is not assigned and could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:34:	MissingOverride:	MissingOverride: The method 'getName()' is missing an @Override annotation.
src/restaurantsystem/component/billing/BillingManagement.java:45:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/billing/BillingManagement.java:46:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [BillingManagement.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/billing/BillingManagement.java:47:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: Overridable method called during object construction: BillingManagement.display() 
src/restaurantsystem/component/billing/BillingManagement.java:51:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/component/billing/BillingManagement.java:69:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/billing/BillingManagement.java:70:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/component/billing/BillingManagement.java:80:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/billing/BillingManagement.java:96:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:96:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/billing/BillingManagement.java:103:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:103:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/billing/BillingManagement.java:110:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:110:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/billing/BillingManagement.java:115:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel1Layout' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:152:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:171:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/billing/BillingManagement.java:174:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'om' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:174:	ShortVariable:	ShortVariable: Avoid variables with short names like om
src/restaurantsystem/component/billing/BillingManagement.java:179:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/billing/BillingManagement.java:184:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'rm' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:184:	ShortVariable:	ShortVariable: Avoid variables with short names like rm
src/restaurantsystem/component/billing/BillingManagement.java:188:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/component/billing/BillingManagement.java:188:	CloseResource:	CloseResource: Ensure that resources like this PrintWriter object are closed after use
src/restaurantsystem/component/billing/BillingManagement.java:188:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'pw1' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:189:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/component/billing/BillingManagement.java:189:	CloseResource:	CloseResource: Ensure that resources like this PrintWriter object are closed after use
src/restaurantsystem/component/billing/BillingManagement.java:189:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'pw2' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:190:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/component/billing/BillingManagement.java:190:	CloseResource:	CloseResource: Ensure that resources like this PrintWriter object are closed after use
src/restaurantsystem/component/billing/BillingManagement.java:190:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'pw3' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:193:	EmptyStatementNotInLoop:	EmptyStatementNotInLoop: An empty statement (semicolon) not part of a loop
src/restaurantsystem/component/billing/BillingManagement.java:193:	UnnecessarySemicolon:	UnnecessarySemicolon: Unnecessary semicolon
src/restaurantsystem/component/billing/BillingManagement.java:196:	AvoidCatchingGenericException:	AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
src/restaurantsystem/component/billing/BillingManagement.java:196:	EmptyCatchBlock:	EmptyCatchBlock: Avoid empty catch blocks
src/restaurantsystem/component/billing/BillingManagement.java:200:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/billing/BillingManagement.java:204:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'complete' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:211:	AvoidCatchingGenericException:	AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
src/restaurantsystem/component/billing/BillingManagement.java:211:	EmptyCatchBlock:	EmptyCatchBlock: Avoid empty catch blocks
src/restaurantsystem/component/billing/BillingManagement.java:220:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/billing/BillingManagement.java:221:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/billing/BillingManagement.java:222:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/billing/BillingManagement.java:225:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/billing/BillingManagement.java:226:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/billing/BillingManagement.java:232:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/billing/BillingManagement.java:233:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/billing/BillingManagement.java:234:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/billing/BillingManagement.java:235:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/billing/BillingManagement.java:236:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/billing/BillingManagement.java:237:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/billing/BillingManagement.java:238:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/billing/BillingManagement.java:245:	MissingOverride:	MissingOverride: The method 'run()' is missing an @Override annotation.
src/restaurantsystem/component/billing/BillingManagement.java:252:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:252:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/billing/BillingManagement.java:252:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingManagement.java:253:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:253:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/billing/BillingManagement.java:253:	SingularField:	SingularField: Perhaps 'jPanel1' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingManagement.java:254:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:254:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/billing/BillingManagement.java:254:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingManagement.java:255:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:255:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/billing/BillingManagement.java:255:	SingularField:	SingularField: Perhaps 'paymentButton' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingManagement.java:256:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:256:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/billing/BillingManagement.java:256:	SingularField:	SingularField: Perhaps 'printReciptButton' could be replaced by a local variable.
src/restaurantsystem/component/billing/BillingManagement.java:257:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:257:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/billing/BillingManagement.java:258:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/billing/BillingManagement.java:258:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:16:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/item/AddItem.java:16:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JFrame' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:18:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:18:	NonSerializableClass:	NonSerializableClass: The field 'itemService' of serializable class 'restaurantsystem.component.item.AddItem' is of non-serializable type 'restaurantsystem.service.ItemService'.
src/restaurantsystem/component/item/AddItem.java:23:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/item/AddItem.java:24:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [AddItem.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/item/AddItem.java:34:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/AddItem.java:37:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JLabel' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:38:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JLabel' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:39:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JLabel' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:40:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JTextField' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:41:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JTextField' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:42:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JTextField' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:43:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JButton' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:44:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JButton' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:46:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/item/AddItem.java:58:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/AddItem.java:58:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/AddItem.java:65:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/AddItem.java:65:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/AddItem.java:70:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/item/AddItem.java:70:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:70:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:73:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:74:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:76:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:79:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:79:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'LayoutStyle' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:82:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:83:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:83:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:84:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:84:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:85:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:85:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:87:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:91:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:91:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:96:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:98:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:101:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:101:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:103:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:103:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:111:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:114:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:114:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:115:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:115:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:115:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:117:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'GroupLayout' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:127:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/AddItem.java:129:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'name' could be declared final
src/restaurantsystem/component/item/AddItem.java:130:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'price' could be declared final
src/restaurantsystem/component/item/AddItem.java:131:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'quantity' could be declared final
src/restaurantsystem/component/item/AddItem.java:135:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/item/AddItem.java:141:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/item/AddItem.java:150:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'item' could be declared final
src/restaurantsystem/component/item/AddItem.java:162:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/AddItem.java:163:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'im' could be declared final
src/restaurantsystem/component/item/AddItem.java:163:	ShortVariable:	ShortVariable: Avoid variables with short names like im
src/restaurantsystem/component/item/AddItem.java:173:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:173:	SingularField:	SingularField: Perhaps 'addButton' could be replaced by a local variable.
src/restaurantsystem/component/item/AddItem.java:173:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JButton' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:174:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:174:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:174:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/item/AddItem.java:174:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JButton' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:175:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:175:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:175:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JTextField' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:176:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:176:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:176:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JTextField' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:177:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:177:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:177:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JTextField' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:178:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:178:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:178:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/item/AddItem.java:178:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JLabel' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:179:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:179:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:179:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/item/AddItem.java:179:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JLabel' is already in scope because it is imported in this file
src/restaurantsystem/component/item/AddItem.java:180:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/AddItem.java:180:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/AddItem.java:180:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/item/AddItem.java:180:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing': 'JLabel' is already in scope because it is imported in this file
src/restaurantsystem/component/item/DeleteItem.java:15:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/item/DeleteItem.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:17:	NonSerializableClass:	NonSerializableClass: The field 'itemService' of serializable class 'restaurantsystem.component.item.DeleteItem' is of non-serializable type 'restaurantsystem.service.ItemService'.
src/restaurantsystem/component/item/DeleteItem.java:22:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/item/DeleteItem.java:23:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [DeleteItem.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/item/DeleteItem.java:34:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/DeleteItem.java:35:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/component/item/DeleteItem.java:54:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/item/DeleteItem.java:69:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/DeleteItem.java:69:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/DeleteItem.java:76:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/DeleteItem.java:76:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/DeleteItem.java:81:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel1Layout' could be declared final
src/restaurantsystem/component/item/DeleteItem.java:121:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/item/DeleteItem.java:155:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'fullnames' could be declared final
src/restaurantsystem/component/item/DeleteItem.java:159:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/DeleteItem.java:161:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/DeleteItem.java:163:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/DeleteItem.java:169:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/DeleteItem.java:170:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'name' could be declared final
src/restaurantsystem/component/item/DeleteItem.java:175:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/item/DeleteItem.java:178:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'isDeleted' could be declared final
src/restaurantsystem/component/item/DeleteItem.java:196:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/DeleteItem.java:197:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'im' could be declared final
src/restaurantsystem/component/item/DeleteItem.java:197:	ShortVariable:	ShortVariable: Avoid variables with short names like im
src/restaurantsystem/component/item/DeleteItem.java:207:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/DeleteItem.java:208:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/DeleteItem.java:209:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/DeleteItem.java:212:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/item/DeleteItem.java:213:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/item/DeleteItem.java:219:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/DeleteItem.java:220:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/DeleteItem.java:221:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/DeleteItem.java:222:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/DeleteItem.java:223:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/DeleteItem.java:224:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/DeleteItem.java:225:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/DeleteItem.java:237:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:237:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:237:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:238:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:238:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:238:	SingularField:	SingularField: Perhaps 'deleteButton' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:239:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:239:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:240:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:240:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:240:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:241:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:241:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:241:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:242:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:242:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:242:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:243:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:243:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:243:	SingularField:	SingularField: Perhaps 'jLabel4' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:244:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:244:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:244:	SingularField:	SingularField: Perhaps 'jPanel1' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:245:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:245:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:245:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:246:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:246:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:246:	SingularField:	SingularField: Perhaps 'jScrollPane2' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:247:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:247:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/DeleteItem.java:247:	SingularField:	SingularField: Perhaps 'jTextArea1' could be replaced by a local variable.
src/restaurantsystem/component/item/DeleteItem.java:248:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/DeleteItem.java:248:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:14:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/item/ItemManagement.java:19:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/item/ItemManagement.java:20:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [ItemManagement.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/item/ItemManagement.java:29:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/ItemManagement.java:30:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/component/item/ItemManagement.java:46:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/item/ItemManagement.java:56:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/ItemManagement.java:56:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/ItemManagement.java:63:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/ItemManagement.java:63:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/ItemManagement.java:70:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/ItemManagement.java:70:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/ItemManagement.java:77:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/ItemManagement.java:77:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/ItemManagement.java:82:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel1Layout' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:111:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/ItemManagement.java:111:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/ItemManagement.java:116:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel2Layout' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:140:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:161:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/ItemManagement.java:162:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'mi' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:162:	ShortVariable:	ShortVariable: Avoid variables with short names like mi
src/restaurantsystem/component/item/ItemManagement.java:167:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/ItemManagement.java:168:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'i' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:168:	ShortVariable:	ShortVariable: Avoid variables with short names like i
src/restaurantsystem/component/item/ItemManagement.java:175:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/ItemManagement.java:176:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'vm' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:176:	ShortVariable:	ShortVariable: Avoid variables with short names like vm
src/restaurantsystem/component/item/ItemManagement.java:181:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/ItemManagement.java:182:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'd' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:182:	ShortVariable:	ShortVariable: Avoid variables with short names like d
src/restaurantsystem/component/item/ItemManagement.java:187:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/ItemManagement.java:188:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'rm' could be declared final
src/restaurantsystem/component/item/ItemManagement.java:188:	ShortVariable:	ShortVariable: Avoid variables with short names like rm
src/restaurantsystem/component/item/ItemManagement.java:198:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:198:	SingularField:	SingularField: Perhaps 'addButton' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:199:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:199:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:199:	SingularField:	SingularField: Perhaps 'deleteButton' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:200:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:200:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:200:	SingularField:	SingularField: Perhaps 'jButton1' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:201:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:201:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:201:	SingularField:	SingularField: Perhaps 'jButton6' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:202:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:202:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:202:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:203:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:203:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:203:	SingularField:	SingularField: Perhaps 'jPanel1' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:204:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:204:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:204:	SingularField:	SingularField: Perhaps 'jPanel2' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:205:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:205:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:205:	SingularField:	SingularField: Perhaps 'modifyButton' could be replaced by a local variable.
src/restaurantsystem/component/item/ItemManagement.java:206:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ItemManagement.java:206:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ItemManagement.java:206:	SingularField:	SingularField: Perhaps 'viewButton' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:16:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/item/UpdateItem.java:18:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:18:	NonSerializableClass:	NonSerializableClass: The field 'itemService' of serializable class 'restaurantsystem.component.item.UpdateItem' is of non-serializable type 'restaurantsystem.service.ItemService'.
src/restaurantsystem/component/item/UpdateItem.java:23:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/item/UpdateItem.java:24:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [UpdateItem.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/item/UpdateItem.java:36:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'fullnames' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:40:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/UpdateItem.java:42:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/UpdateItem.java:44:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/UpdateItem.java:49:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/UpdateItem.java:50:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/component/item/UpdateItem.java:68:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/item/UpdateItem.java:81:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/UpdateItem.java:81:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/UpdateItem.java:88:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/UpdateItem.java:88:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/UpdateItem.java:105:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:177:	CyclomaticComplexity:	CyclomaticComplexity: The method 'updateButtonActionPerformed(ActionEvent)' has a cyclomatic complexity of 10.
src/restaurantsystem/component/item/UpdateItem.java:177:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/UpdateItem.java:178:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'srcName' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:179:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'modName' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:180:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'modPrice' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:181:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'modQuantity' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:185:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/item/UpdateItem.java:191:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/item/UpdateItem.java:197:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/item/UpdateItem.java:200:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'updatedItem' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:202:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'isUpdated' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:222:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/UpdateItem.java:223:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'im' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:223:	ShortVariable:	ShortVariable: Avoid variables with short names like im
src/restaurantsystem/component/item/UpdateItem.java:233:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/UpdateItem.java:234:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/UpdateItem.java:235:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/UpdateItem.java:238:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/item/UpdateItem.java:239:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/item/UpdateItem.java:245:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/UpdateItem.java:246:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/UpdateItem.java:247:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/UpdateItem.java:248:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/UpdateItem.java:249:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/UpdateItem.java:250:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/UpdateItem.java:251:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/UpdateItem.java:263:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:263:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:263:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:264:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:264:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:264:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:265:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:265:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:265:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:266:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:266:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:266:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:267:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:267:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:267:	SingularField:	SingularField: Perhaps 'jLabel4' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:268:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:268:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:268:	SingularField:	SingularField: Perhaps 'jLabel5' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:269:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:269:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:269:	SingularField:	SingularField: Perhaps 'jLabel6' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:270:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:270:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:270:	SingularField:	SingularField: Perhaps 'jLabel7' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:271:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:271:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:271:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/item/UpdateItem.java:272:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:272:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:273:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:273:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:274:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:274:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:275:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:275:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:276:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:276:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:277:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/UpdateItem.java:277:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/UpdateItem.java:277:	SingularField:	SingularField: Perhaps 'updateButton' could be replaced by a local variable.
src/restaurantsystem/component/item/ViewItem.java:15:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/item/ViewItem.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ViewItem.java:17:	NonSerializableClass:	NonSerializableClass: The field 'itemService' of serializable class 'restaurantsystem.component.item.ViewItem' is of non-serializable type 'restaurantsystem.service.ItemService'.
src/restaurantsystem/component/item/ViewItem.java:19:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/item/ViewItem.java:19:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/component/item/ViewItem.java:20:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [ViewItem.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/item/ViewItem.java:26:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'fullnames' could be declared final
src/restaurantsystem/component/item/ViewItem.java:30:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/ViewItem.java:34:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/item/ViewItem.java:46:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/ViewItem.java:56:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/item/ViewItem.java:66:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/item/ViewItem.java:66:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/item/ViewItem.java:66:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.awt.event': 'ActionEvent' is already in scope because it is imported in this file
src/restaurantsystem/component/item/ViewItem.java:77:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/item/ViewItem.java:118:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.awt.event': 'ActionEvent' is already in scope because it is imported in this file
src/restaurantsystem/component/item/ViewItem.java:118:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/item/ViewItem.java:119:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'im' could be declared final
src/restaurantsystem/component/item/ViewItem.java:119:	ShortVariable:	ShortVariable: Avoid variables with short names like im
src/restaurantsystem/component/item/ViewItem.java:129:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/ViewItem.java:130:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/ViewItem.java:131:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/item/ViewItem.java:134:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/item/ViewItem.java:135:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/item/ViewItem.java:141:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/ViewItem.java:142:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/ViewItem.java:143:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/ViewItem.java:144:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/ViewItem.java:145:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/ViewItem.java:146:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/item/ViewItem.java:147:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/item/ViewItem.java:158:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ViewItem.java:158:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ViewItem.java:158:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/item/ViewItem.java:159:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ViewItem.java:159:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ViewItem.java:159:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/item/ViewItem.java:160:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ViewItem.java:160:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ViewItem.java:160:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/item/ViewItem.java:161:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ViewItem.java:161:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ViewItem.java:161:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/item/ViewItem.java:162:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ViewItem.java:162:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ViewItem.java:162:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/item/ViewItem.java:163:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/item/ViewItem.java:163:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/item/ViewItem.java:166:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/component/item/ViewItem.java:166:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/restaurantsystem/component/item/ViewItem.java:166:	UncommentedEmptyMethodBody:	UncommentedEmptyMethodBody: Document empty method body
src/restaurantsystem/component/labour/AddLabour.java:16:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/labour/AddLabour.java:18:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:18:	NonSerializableClass:	NonSerializableClass: The field 'labourService' of serializable class 'restaurantsystem.component.labour.AddLabour' is of non-serializable type 'restaurantsystem.service.LabourService'.
src/restaurantsystem/component/labour/AddLabour.java:23:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/labour/AddLabour.java:24:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [AddLabour.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/labour/AddLabour.java:34:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/AddLabour.java:46:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/labour/AddLabour.java:51:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/AddLabour.java:51:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/AddLabour.java:58:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/AddLabour.java:58:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/AddLabour.java:70:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/AddLabour.java:70:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/AddLabour.java:75:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/labour/AddLabour.java:131:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/AddLabour.java:133:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'id' could be declared final
src/restaurantsystem/component/labour/AddLabour.java:133:	ShortVariable:	ShortVariable: Avoid variables with short names like id
src/restaurantsystem/component/labour/AddLabour.java:134:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'name' could be declared final
src/restaurantsystem/component/labour/AddLabour.java:135:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'salary' could be declared final
src/restaurantsystem/component/labour/AddLabour.java:139:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/labour/AddLabour.java:147:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labour' could be declared final
src/restaurantsystem/component/labour/AddLabour.java:159:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/AddLabour.java:161:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'lb' could be declared final
src/restaurantsystem/component/labour/AddLabour.java:161:	ShortVariable:	ShortVariable: Avoid variables with short names like lb
src/restaurantsystem/component/labour/AddLabour.java:166:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/AddLabour.java:175:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/AddLabour.java:176:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/AddLabour.java:177:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/AddLabour.java:180:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/labour/AddLabour.java:181:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/labour/AddLabour.java:187:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/AddLabour.java:188:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/AddLabour.java:189:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/AddLabour.java:190:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/AddLabour.java:191:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/AddLabour.java:192:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/AddLabour.java:193:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/AddLabour.java:205:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:205:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/AddLabour.java:205:	SingularField:	SingularField: Perhaps 'addButton' could be replaced by a local variable.
src/restaurantsystem/component/labour/AddLabour.java:206:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:206:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/AddLabour.java:206:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/labour/AddLabour.java:207:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:207:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/AddLabour.java:207:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/labour/AddLabour.java:208:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:208:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/AddLabour.java:208:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/labour/AddLabour.java:209:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:209:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/AddLabour.java:209:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/labour/AddLabour.java:210:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:210:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/AddLabour.java:211:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:211:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/AddLabour.java:212:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/AddLabour.java:212:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/DeleteLabour.java:15:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/labour/DeleteLabour.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/DeleteLabour.java:17:	NonSerializableClass:	NonSerializableClass: The field 'labourService' of serializable class 'restaurantsystem.component.labour.DeleteLabour' is of non-serializable type 'restaurantsystem.service.LabourService'.
src/restaurantsystem/component/labour/DeleteLabour.java:22:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/labour/DeleteLabour.java:23:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [DeleteLabour.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/labour/DeleteLabour.java:29:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'stringBuilder' could be declared final
src/restaurantsystem/component/labour/DeleteLabour.java:32:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/DeleteLabour.java:34:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/DeleteLabour.java:36:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/DeleteLabour.java:47:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/DeleteLabour.java:57:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/labour/DeleteLabour.java:62:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/DeleteLabour.java:62:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/DeleteLabour.java:69:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/DeleteLabour.java:69:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/DeleteLabour.java:81:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/labour/DeleteLabour.java:123:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/DeleteLabour.java:125:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'deleteLabourID' could be declared final
src/restaurantsystem/component/labour/DeleteLabour.java:146:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/DeleteLabour.java:148:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'lm' could be declared final
src/restaurantsystem/component/labour/DeleteLabour.java:148:	ShortVariable:	ShortVariable: Avoid variables with short names like lm
src/restaurantsystem/component/labour/DeleteLabour.java:158:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/DeleteLabour.java:159:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/DeleteLabour.java:160:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/DeleteLabour.java:163:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/labour/DeleteLabour.java:164:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/labour/DeleteLabour.java:170:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/DeleteLabour.java:171:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/DeleteLabour.java:172:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/DeleteLabour.java:173:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/DeleteLabour.java:174:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/DeleteLabour.java:175:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/DeleteLabour.java:176:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/DeleteLabour.java:187:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/DeleteLabour.java:187:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/DeleteLabour.java:187:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/labour/DeleteLabour.java:188:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/DeleteLabour.java:188:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/DeleteLabour.java:188:	SingularField:	SingularField: Perhaps 'deleteButton' could be replaced by a local variable.
src/restaurantsystem/component/labour/DeleteLabour.java:189:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/DeleteLabour.java:189:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/DeleteLabour.java:189:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/labour/DeleteLabour.java:190:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/DeleteLabour.java:190:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/DeleteLabour.java:190:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/labour/DeleteLabour.java:191:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/DeleteLabour.java:191:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/DeleteLabour.java:192:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/DeleteLabour.java:192:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:14:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/labour/LabourManagement.java:19:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/labour/LabourManagement.java:20:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [LabourManagement.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/labour/LabourManagement.java:29:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/LabourManagement.java:30:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/component/labour/LabourManagement.java:40:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/labour/LabourManagement.java:50:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:50:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/LabourManagement.java:57:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:57:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/LabourManagement.java:64:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:64:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/LabourManagement.java:71:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:71:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/LabourManagement.java:76:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel1Layout' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:105:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:105:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/LabourManagement.java:110:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel2Layout' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:133:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:154:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/LabourManagement.java:156:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'i' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:156:	ShortVariable:	ShortVariable: Avoid variables with short names like i
src/restaurantsystem/component/labour/LabourManagement.java:162:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/LabourManagement.java:164:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'vl' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:164:	ShortVariable:	ShortVariable: Avoid variables with short names like vl
src/restaurantsystem/component/labour/LabourManagement.java:170:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/LabourManagement.java:172:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'dl' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:172:	ShortVariable:	ShortVariable: Avoid variables with short names like dl
src/restaurantsystem/component/labour/LabourManagement.java:177:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/LabourManagement.java:179:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'ml' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:179:	ShortVariable:	ShortVariable: Avoid variables with short names like ml
src/restaurantsystem/component/labour/LabourManagement.java:184:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/LabourManagement.java:186:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'rm' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:186:	ShortVariable:	ShortVariable: Avoid variables with short names like rm
src/restaurantsystem/component/labour/LabourManagement.java:196:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/LabourManagement.java:197:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/LabourManagement.java:198:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/LabourManagement.java:201:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/labour/LabourManagement.java:202:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/labour/LabourManagement.java:208:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/LabourManagement.java:209:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/LabourManagement.java:210:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/LabourManagement.java:211:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/LabourManagement.java:212:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/LabourManagement.java:213:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/LabourManagement.java:214:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/LabourManagement.java:225:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/LabourManagement.java:225:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:225:	SingularField:	SingularField: Perhaps 'addLabour' could be replaced by a local variable.
src/restaurantsystem/component/labour/LabourManagement.java:226:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/LabourManagement.java:226:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:226:	SingularField:	SingularField: Perhaps 'deleteLabour' could be replaced by a local variable.
src/restaurantsystem/component/labour/LabourManagement.java:227:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/LabourManagement.java:227:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:227:	SingularField:	SingularField: Perhaps 'jButton6' could be replaced by a local variable.
src/restaurantsystem/component/labour/LabourManagement.java:228:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/LabourManagement.java:228:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:228:	SingularField:	SingularField: Perhaps 'jPanel1' could be replaced by a local variable.
src/restaurantsystem/component/labour/LabourManagement.java:229:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/LabourManagement.java:229:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:229:	SingularField:	SingularField: Perhaps 'jPanel2' could be replaced by a local variable.
src/restaurantsystem/component/labour/LabourManagement.java:230:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/LabourManagement.java:230:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:230:	SingularField:	SingularField: Perhaps 'updateLabour' could be replaced by a local variable.
src/restaurantsystem/component/labour/LabourManagement.java:231:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/LabourManagement.java:231:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/LabourManagement.java:231:	SingularField:	SingularField: Perhaps 'viewLabour' could be replaced by a local variable.
src/restaurantsystem/component/labour/UpdateLabour.java:17:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/labour/UpdateLabour.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:19:	NonSerializableClass:	NonSerializableClass: The field 'labourService' of serializable class 'restaurantsystem.component.labour.UpdateLabour' is of non-serializable type 'restaurantsystem.service.LabourService'.
src/restaurantsystem/component/labour/UpdateLabour.java:24:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/labour/UpdateLabour.java:25:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [UpdateLabour.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/labour/UpdateLabour.java:36:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/UpdateLabour.java:37:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/component/labour/UpdateLabour.java:52:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/labour/UpdateLabour.java:68:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:68:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/UpdateLabour.java:75:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:75:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/UpdateLabour.java:82:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:149:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'stringBuilder' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:153:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/UpdateLabour.java:155:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/UpdateLabour.java:157:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/UpdateLabour.java:162:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/UpdateLabour.java:164:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'sourceId' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:166:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'id' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:166:	ShortVariable:	ShortVariable: Avoid variables with short names like id
src/restaurantsystem/component/labour/UpdateLabour.java:167:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'name' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:168:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'salary' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:172:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/labour/UpdateLabour.java:177:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/labour/UpdateLabour.java:180:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'updatedLabour' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:182:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'isUpdated' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:202:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/UpdateLabour.java:203:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'lm' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:203:	ShortVariable:	ShortVariable: Avoid variables with short names like lm
src/restaurantsystem/component/labour/UpdateLabour.java:213:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/UpdateLabour.java:214:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/UpdateLabour.java:215:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/UpdateLabour.java:218:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/labour/UpdateLabour.java:219:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/labour/UpdateLabour.java:225:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/UpdateLabour.java:226:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/UpdateLabour.java:227:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/UpdateLabour.java:228:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/UpdateLabour.java:229:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/UpdateLabour.java:230:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/UpdateLabour.java:231:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/UpdateLabour.java:243:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:243:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:243:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/labour/UpdateLabour.java:244:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:244:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:244:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/labour/UpdateLabour.java:245:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:245:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:245:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/labour/UpdateLabour.java:246:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:246:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:246:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/labour/UpdateLabour.java:247:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:247:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:247:	SingularField:	SingularField: Perhaps 'jLabel4' could be replaced by a local variable.
src/restaurantsystem/component/labour/UpdateLabour.java:248:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:248:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:248:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/labour/UpdateLabour.java:249:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:249:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:250:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:250:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:250:	LongVariable:	LongVariable: Avoid excessively long variable names like newLabourNameField
src/restaurantsystem/component/labour/UpdateLabour.java:251:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:251:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:251:	LongVariable:	LongVariable: Avoid excessively long variable names like newLabourSalaryField
src/restaurantsystem/component/labour/UpdateLabour.java:252:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:252:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:253:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:253:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:254:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/UpdateLabour.java:254:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/UpdateLabour.java:254:	SingularField:	SingularField: Perhaps 'updateButton' could be replaced by a local variable.
src/restaurantsystem/component/labour/ViewLabour.java:14:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/labour/ViewLabour.java:16:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/ViewLabour.java:16:	NonSerializableClass:	NonSerializableClass: The field 'labourService' of serializable class 'restaurantsystem.component.labour.ViewLabour' is of non-serializable type 'restaurantsystem.service.LabourService'.
src/restaurantsystem/component/labour/ViewLabour.java:21:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/labour/ViewLabour.java:22:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [ViewLabour.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/labour/ViewLabour.java:33:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/ViewLabour.java:43:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/labour/ViewLabour.java:53:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/labour/ViewLabour.java:53:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/labour/ViewLabour.java:64:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/labour/ViewLabour.java:104:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'stringBuilder' could be declared final
src/restaurantsystem/component/labour/ViewLabour.java:108:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/ViewLabour.java:110:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/ViewLabour.java:112:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/labour/ViewLabour.java:117:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/labour/ViewLabour.java:118:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'lm' could be declared final
src/restaurantsystem/component/labour/ViewLabour.java:118:	ShortVariable:	ShortVariable: Avoid variables with short names like lm
src/restaurantsystem/component/labour/ViewLabour.java:128:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/ViewLabour.java:129:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/ViewLabour.java:130:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/labour/ViewLabour.java:133:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/labour/ViewLabour.java:134:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/labour/ViewLabour.java:140:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/ViewLabour.java:141:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/ViewLabour.java:142:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/ViewLabour.java:143:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/ViewLabour.java:144:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/ViewLabour.java:145:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/labour/ViewLabour.java:146:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/labour/ViewLabour.java:157:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/ViewLabour.java:157:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/ViewLabour.java:157:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/labour/ViewLabour.java:158:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/ViewLabour.java:158:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/ViewLabour.java:158:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/labour/ViewLabour.java:159:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/ViewLabour.java:159:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/ViewLabour.java:159:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/labour/ViewLabour.java:160:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/ViewLabour.java:160:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/ViewLabour.java:160:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/labour/ViewLabour.java:161:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/ViewLabour.java:161:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/labour/ViewLabour.java:161:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/labour/ViewLabour.java:162:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/labour/ViewLabour.java:162:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:6:	CouplingBetweenObjects:	CouplingBetweenObjects: High amount of different objects as members denotes a high coupling
src/restaurantsystem/component/order/OrderManagement.java:13:	UnnecessaryImport:	UnnecessaryImport: Unused import 'java.util.ArrayList'
src/restaurantsystem/component/order/OrderManagement.java:33:	MissingSerialVersionUID:	MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID
src/restaurantsystem/component/order/OrderManagement.java:33:	TooManyFields:	TooManyFields: Too many fields
src/restaurantsystem/component/order/OrderManagement.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:35:	NonSerializableClass:	NonSerializableClass: The field 'itemService' of serializable class 'restaurantsystem.component.order.OrderManagement' is of non-serializable type 'restaurantsystem.service.ItemService'.
src/restaurantsystem/component/order/OrderManagement.java:36:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:36:	NonSerializableClass:	NonSerializableClass: The field 'orderService' of serializable class 'restaurantsystem.component.order.OrderManagement' is of non-serializable type 'restaurantsystem.service.OrderService'.
src/restaurantsystem/component/order/OrderManagement.java:42:	CallSuperInConstructor:	CallSuperInConstructor: It is a good practice to call super() in a constructor
src/restaurantsystem/component/order/OrderManagement.java:43:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: This method may call an overridable method during object construction: JFrame.setDefaultCloseOperation(int) (call stack: [OrderManagement.initComponents(), JFrame.setDefaultCloseOperation(int)])
src/restaurantsystem/component/order/OrderManagement.java:56:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/order/OrderManagement.java:57:	ExcessiveMethodLength:	ExcessiveMethodLength: Avoid really long methods.
src/restaurantsystem/component/order/OrderManagement.java:57:	NcssCount:	NcssCount: The method 'initComponents()' has a NCSS line count of 77.
src/restaurantsystem/component/order/OrderManagement.java:83:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'javax.swing.WindowConstants': 'EXIT_ON_CLOSE' is already in scope because it is inherited by an enclosing type
src/restaurantsystem/component/order/OrderManagement.java:99:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/order/OrderManagement.java:99:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/order/OrderManagement.java:113:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/order/OrderManagement.java:113:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/order/OrderManagement.java:120:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/order/OrderManagement.java:120:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/order/OrderManagement.java:125:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel2Layout' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:168:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel1Layout' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:216:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/order/OrderManagement.java:216:	MissingOverride:	MissingOverride: The method 'actionPerformed(ActionEvent)' is missing an @Override annotation.
src/restaurantsystem/component/order/OrderManagement.java:221:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'jPanel3Layout' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:288:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'layout' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:308:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'stringBuilder' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:310:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'item' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:312:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/order/OrderManagement.java:318:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/order/OrderManagement.java:324:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'evt' is not assigned and could be declared final
src/restaurantsystem/component/order/OrderManagement.java:326:	LawOfDemeter:	LawOfDemeter: Call to `getCart` on foreign value `orderService` (degree 1)
src/restaurantsystem/component/order/OrderManagement.java:326:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'cart' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:328:	LawOfDemeter:	LawOfDemeter: Call to `getCartItems` on foreign value `cart` (degree 2)
src/restaurantsystem/component/order/OrderManagement.java:337:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/component/order/OrderManagement.java:339:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'orderLine' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:341:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'orderParts' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:343:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/restaurantsystem/component/order/OrderManagement.java:343:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'orderLineObj' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:353:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/order/OrderManagement.java:357:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'orderNumber' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:360:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/component/order/OrderManagement.java:360:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/component/order/OrderManagement.java:361:	LawOfDemeter:	LawOfDemeter: Call to `getCartItems` on foreign value `cart` (degree 2)
src/restaurantsystem/component/order/OrderManagement.java:362:	LawOfDemeter:	LawOfDemeter: Call to `getCartItems` on foreign value `cart` (degree 2)
src/restaurantsystem/component/order/OrderManagement.java:362:	LawOfDemeter:	LawOfDemeter: Call to `get` on foreign value `cart.getCartItems()` (degree 2)
src/restaurantsystem/component/order/OrderManagement.java:362:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'cartItem' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:364:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/restaurantsystem/component/order/OrderManagement.java:364:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'orderLine' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:373:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/order/OrderManagement.java:377:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/component/order/OrderManagement.java:377:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/component/order/OrderManagement.java:378:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'sdf' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:378:	SimpleDateFormatNeedsLocale:	SimpleDateFormatNeedsLocale: When instantiating a SimpleDateFormat object, specify a Locale
src/restaurantsystem/component/order/OrderManagement.java:379:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'date' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:381:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'order' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:383:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/restaurantsystem/component/order/OrderManagement.java:386:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/order/OrderManagement.java:390:	LawOfDemeter:	LawOfDemeter: Call to `getCartItems` on foreign value `cart` (degree 2)
src/restaurantsystem/component/order/OrderManagement.java:403:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/order/OrderManagement.java:404:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'im' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:404:	ShortVariable:	ShortVariable: Avoid variables with short names like im
src/restaurantsystem/component/order/OrderManagement.java:409:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/order/OrderManagement.java:412:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'newItemId' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:413:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'newItemQuantityAsString' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:413:	LongVariable:	LongVariable: Avoid excessively long variable names like newItemQuantityAsString
src/restaurantsystem/component/order/OrderManagement.java:417:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/order/OrderManagement.java:423:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/component/order/OrderManagement.java:427:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'newItemQuantity' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:429:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'newItem' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:444:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'cartItem' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:448:	LawOfDemeter:	LawOfDemeter: Call to `getCart` on foreign value `orderService` (degree 1)
src/restaurantsystem/component/order/OrderManagement.java:457:	UnusedFormalParameter:	UnusedFormalParameter: Avoid unused method parameters such as 'evt'.
src/restaurantsystem/component/order/OrderManagement.java:464:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/component/order/OrderManagement.java:466:	LawOfDemeter:	LawOfDemeter: Call to `getCartItems` on foreign value `orderService.getCart()` (degree 2)
src/restaurantsystem/component/order/OrderManagement.java:466:	LawOfDemeter:	LawOfDemeter: Call to `getCart` on foreign value `orderService` (degree 1)
src/restaurantsystem/component/order/OrderManagement.java:466:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'cartItems' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:468:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'stringBuilder' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:472:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/order/OrderManagement.java:474:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/order/OrderManagement.java:476:	AppendCharacterWithChar:	AppendCharacterWithChar: Avoid appending characters as strings in StringBuffer.append.
src/restaurantsystem/component/order/OrderManagement.java:487:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/order/OrderManagement.java:488:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/order/OrderManagement.java:489:	CommentSize:	CommentSize: Comment is too large: Line too long
src/restaurantsystem/component/order/OrderManagement.java:492:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'info' could be declared final
src/restaurantsystem/component/order/OrderManagement.java:493:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using literals in if statements
src/restaurantsystem/component/order/OrderManagement.java:499:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/order/OrderManagement.java:499:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Level' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:499:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Logger' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:500:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/order/OrderManagement.java:501:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/order/OrderManagement.java:501:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Level' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:501:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Logger' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:502:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/order/OrderManagement.java:503:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/order/OrderManagement.java:503:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Level' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:503:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Logger' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:504:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'ClassNotFoundException' branch
src/restaurantsystem/component/order/OrderManagement.java:505:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/component/order/OrderManagement.java:505:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Level' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:505:	UnnecessaryFullyQualifiedName:	UnnecessaryFullyQualifiedName: Unnecessary qualifier 'java.util.logging': 'Logger' is already in scope because it is imported in this file
src/restaurantsystem/component/order/OrderManagement.java:516:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:516:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:516:	SingularField:	SingularField: Perhaps 'addToCartButton' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:517:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:517:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:517:	SingularField:	SingularField: Perhaps 'backButton' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:518:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:518:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:518:	SingularField:	SingularField: Perhaps 'clearCartButton' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:519:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:519:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:519:	LongVariable:	LongVariable: Avoid excessively long variable names like itemIDToOrderField
src/restaurantsystem/component/order/OrderManagement.java:520:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:520:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:520:	LongVariable:	LongVariable: Avoid excessively long variable names like itemOrderQuantityField
src/restaurantsystem/component/order/OrderManagement.java:521:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:521:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:521:	SingularField:	SingularField: Perhaps 'jLabel1' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:522:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:522:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:522:	SingularField:	SingularField: Perhaps 'jLabel10' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:523:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:523:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:523:	SingularField:	SingularField: Perhaps 'jLabel2' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:524:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:524:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:524:	SingularField:	SingularField: Perhaps 'jLabel3' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:525:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:525:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:525:	SingularField:	SingularField: Perhaps 'jLabel4' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:526:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:526:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:526:	SingularField:	SingularField: Perhaps 'jLabel5' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:527:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:527:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:527:	SingularField:	SingularField: Perhaps 'jLabel6' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:528:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:528:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:528:	SingularField:	SingularField: Perhaps 'jLabel7' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:529:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:529:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:529:	SingularField:	SingularField: Perhaps 'jLabel8' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:530:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:530:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:530:	SingularField:	SingularField: Perhaps 'jPanel1' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:531:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:531:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:531:	SingularField:	SingularField: Perhaps 'jPanel2' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:532:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:532:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:532:	SingularField:	SingularField: Perhaps 'jPanel3' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:533:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:533:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:533:	SingularField:	SingularField: Perhaps 'jScrollPane1' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:534:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:534:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:534:	SingularField:	SingularField: Perhaps 'jScrollPane2' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:535:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:535:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:535:	SingularField:	SingularField: Perhaps 'orderButton' could be replaced by a local variable.
src/restaurantsystem/component/order/OrderManagement.java:536:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:536:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:537:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:537:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/component/order/OrderManagement.java:538:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/component/order/OrderManagement.java:538:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/restaurantsystem/model/Cart.java:14:	DataClass:	DataClass: The class 'Cart' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=6)
src/restaurantsystem/model/Cart.java:14:	ShortClassName:	ShortClassName: Avoid short class names like Cart
src/restaurantsystem/model/Cart.java:16:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Cart.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Cart.java:19:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/model/Cart.java:19:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'cartItems' is not assigned and could be declared final
src/restaurantsystem/model/Cart.java:19:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'totalPrice' is not assigned and could be declared final
src/restaurantsystem/model/Cart.java:28:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'cartItems' is not assigned and could be declared final
src/restaurantsystem/model/Cart.java:32:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/model/Cart.java:32:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'cartItem' is not assigned and could be declared final
src/restaurantsystem/model/Cart.java:44:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'totalPrice' is not assigned and could be declared final
src/restaurantsystem/model/CartItem.java:12:	DataClass:	DataClass: The class 'CartItem' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=7)
src/restaurantsystem/model/CartItem.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/CartItem.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/CartItem.java:16:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/CartItem.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/model/CartItem.java:18:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'item' is not assigned and could be declared final
src/restaurantsystem/model/CartItem.java:18:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/model/CartItem.java:18:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'quantity' is not assigned and could be declared final
src/restaurantsystem/model/CartItem.java:28:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'item' is not assigned and could be declared final
src/restaurantsystem/model/CartItem.java:36:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'quantity' is not assigned and could be declared final
src/restaurantsystem/model/CartItem.java:44:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/model/Item.java:12:	DataClass:	DataClass: The class 'Item' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=7)
src/restaurantsystem/model/Item.java:12:	ShortClassName:	ShortClassName: Avoid short class names like Item
src/restaurantsystem/model/Item.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Item.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Item.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Item.java:17:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/model/Item.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/model/Item.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/model/Item.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'quantity' is not assigned and could be declared final
src/restaurantsystem/model/Item.java:27:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/model/Item.java:35:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/model/Item.java:43:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'quantity' is not assigned and could be declared final
src/restaurantsystem/model/Labour.java:12:	DataClass:	DataClass: The class 'Labour' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=7)
src/restaurantsystem/model/Labour.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Labour.java:13:	ShortVariable:	ShortVariable: Avoid variables with short names like id
src/restaurantsystem/model/Labour.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Labour.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Labour.java:17:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/model/Labour.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'id' is not assigned and could be declared final
src/restaurantsystem/model/Labour.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/model/Labour.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'salary' is not assigned and could be declared final
src/restaurantsystem/model/Labour.java:17:	ShortVariable:	ShortVariable: Avoid variables with short names like id
src/restaurantsystem/model/Labour.java:27:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'id' is not assigned and could be declared final
src/restaurantsystem/model/Labour.java:27:	ShortVariable:	ShortVariable: Avoid variables with short names like id
src/restaurantsystem/model/Labour.java:35:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/model/Labour.java:43:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'salary' is not assigned and could be declared final
src/restaurantsystem/model/Order.java:12:	DataClass:	DataClass: The class 'Order' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=7)
src/restaurantsystem/model/Order.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Order.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Order.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/Order.java:17:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/model/Order.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'date' is not assigned and could be declared final
src/restaurantsystem/model/Order.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'orderID' is not assigned and could be declared final
src/restaurantsystem/model/Order.java:17:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/model/Order.java:27:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'orderID' is not assigned and could be declared final
src/restaurantsystem/model/Order.java:35:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/model/Order.java:43:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'date' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:12:	DataClass:	DataClass: The class 'OrderLine' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=8, WMC=9)
src/restaurantsystem/model/OrderLine.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/OrderLine.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/OrderLine.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/OrderLine.java:16:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/model/OrderLine.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/model/OrderLine.java:18:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:18:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'orderID' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:18:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:18:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'quantity' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:29:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'orderID' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:37:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:45:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'quantity' is not assigned and could be declared final
src/restaurantsystem/model/OrderLine.java:53:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'price' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:29:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/ItemService.java:29:	UncommentedEmptyConstructor:	UncommentedEmptyConstructor: Document empty constructor
src/restaurantsystem/service/ItemService.java:29:	UnnecessaryConstructor:	UnnecessaryConstructor: Avoid unnecessary constructors - the compiler will generate these for you
src/restaurantsystem/service/ItemService.java:32:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/ItemService.java:33:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'items' could be declared final
src/restaurantsystem/service/ItemService.java:34:	AvoidDuplicateLiterals:	AvoidDuplicateLiterals: The String literal "storage/item.txt" appears 9 times in this file; the first occurrence is on line 34
src/restaurantsystem/service/ItemService.java:34:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/ItemService.java:36:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'itemLine' could be declared final
src/restaurantsystem/service/ItemService.java:38:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'itemInfo' could be declared final
src/restaurantsystem/service/ItemService.java:40:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/restaurantsystem/service/ItemService.java:40:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'item' could be declared final
src/restaurantsystem/service/ItemService.java:46:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:51:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/ItemService.java:51:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'index' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:52:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'listOfItem' could be declared final
src/restaurantsystem/service/ItemService.java:55:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/service/ItemService.java:61:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/ItemService.java:61:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'item' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:62:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/ItemService.java:62:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/service/ItemService.java:65:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:69:	AvoidSynchronizedAtMethodLevel:	AvoidSynchronizedAtMethodLevel: Use block level rather than method level synchronization
src/restaurantsystem/service/ItemService.java:69:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/ItemService.java:69:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'name' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:71:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'itemList' could be declared final
src/restaurantsystem/service/ItemService.java:76:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'item' could be declared final
src/restaurantsystem/service/ItemService.java:84:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/service/ItemService.java:92:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:96:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/ItemService.java:96:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/service/ItemService.java:101:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:107:	AvoidSynchronizedAtMethodLevel:	AvoidSynchronizedAtMethodLevel: Use block level rather than method level synchronization
src/restaurantsystem/service/ItemService.java:107:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/ItemService.java:107:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'srcName' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:107:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'updatedItem' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:108:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'itemList' could be declared final
src/restaurantsystem/service/ItemService.java:111:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/ItemService.java:113:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'itemLine' could be declared final
src/restaurantsystem/service/ItemService.java:115:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'itemInfo' could be declared final
src/restaurantsystem/service/ItemService.java:117:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/restaurantsystem/service/ItemService.java:117:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'item' could be declared final
src/restaurantsystem/service/ItemService.java:122:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:128:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'item' could be declared final
src/restaurantsystem/service/ItemService.java:136:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/service/ItemService.java:144:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:147:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/ItemService.java:147:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/service/ItemService.java:152:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:158:	AvoidSynchronizedAtMethodLevel:	AvoidSynchronizedAtMethodLevel: Use block level rather than method level synchronization
src/restaurantsystem/service/ItemService.java:158:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/ItemService.java:158:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'itemName' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:158:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'reduceNumber' is not assigned and could be declared final
src/restaurantsystem/service/ItemService.java:159:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'itemList' could be declared final
src/restaurantsystem/service/ItemService.java:163:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'item' could be declared final
src/restaurantsystem/service/ItemService.java:174:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/ItemService.java:177:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/ItemService.java:177:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/service/ItemService.java:182:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/LabourService.java:31:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/LabourService.java:31:	UncommentedEmptyConstructor:	UncommentedEmptyConstructor: Document empty constructor
src/restaurantsystem/service/LabourService.java:31:	UnnecessaryConstructor:	UnnecessaryConstructor: Avoid unnecessary constructors - the compiler will generate these for you
src/restaurantsystem/service/LabourService.java:34:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/LabourService.java:35:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labourList' could be declared final
src/restaurantsystem/service/LabourService.java:36:	AvoidDuplicateLiterals:	AvoidDuplicateLiterals: The String literal "storage/labour.txt" appears 6 times in this file; the first occurrence is on line 36
src/restaurantsystem/service/LabourService.java:36:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/LabourService.java:39:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labourLine' could be declared final
src/restaurantsystem/service/LabourService.java:41:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labourInfo' could be declared final
src/restaurantsystem/service/LabourService.java:43:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/restaurantsystem/service/LabourService.java:43:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labour' could be declared final
src/restaurantsystem/service/LabourService.java:48:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/LabourService.java:53:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/LabourService.java:53:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'labour' is not assigned and could be declared final
src/restaurantsystem/service/LabourService.java:54:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/LabourService.java:54:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/service/LabourService.java:57:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/LabourService.java:61:	AvoidSynchronizedAtMethodLevel:	AvoidSynchronizedAtMethodLevel: Use block level rather than method level synchronization
src/restaurantsystem/service/LabourService.java:61:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/LabourService.java:61:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'sourceId' is not assigned and could be declared final
src/restaurantsystem/service/LabourService.java:61:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'updatedLabour' is not assigned and could be declared final
src/restaurantsystem/service/LabourService.java:63:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labourList' could be declared final
src/restaurantsystem/service/LabourService.java:67:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labour' could be declared final
src/restaurantsystem/service/LabourService.java:75:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/restaurantsystem/service/LabourService.java:83:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/LabourService.java:86:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/LabourService.java:86:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/service/LabourService.java:91:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/LabourService.java:97:	AvoidSynchronizedAtMethodLevel:	AvoidSynchronizedAtMethodLevel: Use block level rather than method level synchronization
src/restaurantsystem/service/LabourService.java:97:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/LabourService.java:97:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'labourID' is not assigned and could be declared final
src/restaurantsystem/service/LabourService.java:98:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labourList' could be declared final
src/restaurantsystem/service/LabourService.java:101:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/restaurantsystem/service/LabourService.java:103:	LocalVariableCouldBeFinal:	LocalVariableCouldBeFinal: Local variable 'labour' could be declared final
src/restaurantsystem/service/LabourService.java:114:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/LabourService.java:118:	AvoidFileStream:	AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
src/restaurantsystem/service/LabourService.java:118:	ShortVariable:	ShortVariable: Avoid variables with short names like pw
src/restaurantsystem/service/LabourService.java:123:	GuardLogStatement:	GuardLogStatement: Logger calls should be surrounded by log level guards.
src/restaurantsystem/service/OrderService.java:18:	CommentRequired:	CommentRequired: Field comments are required
src/restaurantsystem/service/OrderService.java:20:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/OrderService.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/restaurantsystem/service/OrderService.java:24:	MethodArgumentCouldBeFinal:	MethodArgumentCouldBeFinal: Parameter 'cartItem' is not assigned and could be declared final
src/restaurantsystem/service/OrderService.java:28:	CommentRequired:	CommentRequired: Public method and constructor comments are required
